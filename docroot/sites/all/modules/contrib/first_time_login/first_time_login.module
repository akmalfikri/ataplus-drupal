<?php

/**
 * @file
 * Defines necessary menu's, Permissions, age-calculator form & ajax callbacks.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Database\Database;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function first_time_login_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.first_time_login':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p><strong>' . t('Super user (user with UID = 1), will not be
                  prompted for profile update.') . '</strong></p>';
      $output .= '<p><strong>* </strong>' . t('The First time login module prompts user to reset their profile, when they login to their account for the first time (once profile is updated it will not prompt form next login onwards). After creating a user account with basic details, user can be intimated to log on to their profile and ask them to update it.') . '</p>';
      $output .= '<p><strong>* </strong>' . t('You can configure the threshold number of days after which user will be again prompted to update their profile.') . '</p>';
      $output .= '<p><strong>* </strong>' . t('Timestamp for the existing users will be updated to their last profile access time.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_user_insert().
 */
function first_time_login_user_insert($account) {

  $uid = $account->id();
  $access = $account->getLastAccessedTime();
  $conn = Database::getConnection();
  $conn->insert('user_first_login')
    ->fields([
      'uid' => $uid,
      'first_time_login' => 1,
      'updated_date' => $access,
    ])
    ->execute();
}

/**
 * Implements hook_user_update().
 *
 * Force user to resset account and turn the flag off and updated the timestamp.
 */
function first_time_login_user_update($account) {
  $current_user = \Drupal::currentUser();
  if ($account->isNew() != TRUE && ($account->id() == $current_user->id())) {
    $conn = Database::getConnection();
    $conn->update('user_first_login')
      ->fields([
        'first_time_login' => 0,
        'updated_date' => REQUEST_TIME,
      ])
      ->condition('uid', $account->id(), '=')
      ->execute();
  }
}

/**
 * Implements hook_user_login().
 *
 * When user logins check the flag and last updated profile and act accordingly.
 */
function first_time_login_user_login($account) {
  $conn = Database::getConnection();
  $site_name = \Drupal::config('system.site')->get('name');
  if ($account->id() == 1) {
    return;
  }
  $details = $conn->select('user_first_login', 'n')
    ->fields('n', ['first_time_login', 'updated_date'])
    ->condition('uid', $account->id(), '=')
    ->condition('uid', 1, '!=')
    ->execute()
    ->fetchObject();

  $updated_date = $details->updated_date;

  $current_time = REQUEST_TIME;
  if ($updated_date == 0) {
    $days_diff = 0;
  }
  else {
    $days_diff = ($current_time - $updated_date) / (60 * 60 * 24);
  }
  $config = \Drupal::configFactory()->getEditable('first_time_login.settings');
  $needsupdate = ($days_diff > $config->get('first_time_login_config_days'));

  if (is_object($details)) {
    if ($details->first_time_login == 1 || $needsupdate) {
      // Default login destination to the dashboard.
      $destination = 'user/' . $account->id() . '/edit';
      $url_object = \Drupal::service('path.validator')->getUrlIfValid($destination);
      $url_object->setAbsolute();
      $url = $url_object->toString();
      $response = new RedirectResponse($url, 302);
      $account_created = format_date($account->getCreatedTime(), 'custom', 'd-M-Y');
      $last_updated_date = format_date($updated_date, 'custom', 'd-M-Y');
      if ($needsupdate == FALSE) {
        $new_user_message = $config->get('first_time_login_new_user_message');
        drupal_set_message((t($new_user_message, [
          '@user' => $account->getAccountName(),
          '@site_name' => $site_name,
          '@created_date' => $account_created,
        ]))
        );
      }
      elseif ($details->first_time_login == 0) {
        $update_user_message = $config->get('first_time_login_update_user_message');
        drupal_set_message((t($update_user_message, [
          '@user' => $account->getAccountName(),
          '@site_name' => $site_name,
          '@updated_date' => $last_updated_date,
        ]))
        );
      }
      $response->send();
    }
  }
}

/**
 * Implements hook_user_delete().
 *
 * When user account is deleted delete its corresponding flag.
 */
function first_time_login_user_delete($account) {
  $conn = Database::getConnection();
  $uid = $account->id();
  $conn->delete('user_first_login')
    ->condition('uid', $uid)
    ->execute();
}
