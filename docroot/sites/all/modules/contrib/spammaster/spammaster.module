<?php

/**
 * @file
 * Spam Master code implementation.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function spammaster_help($process_name, RouteMatchInterface $route_match) {

  // Store state version.
  \Drupal::state()->set('spammaster.version', '1.66');

  // Get state version.
  $spammaster_version = \Drupal::state()->get('spammaster.version');

  switch ($process_name) {
    case 'help.page.spammaster':
      $output_help = t('<h3>About</h3>');
      $output_help .= t('<p>Spam Master scans and blocks new Drupal user registrations, comments, and contacts.</p>');
      $output_help .= t('<p>Spam Master uses real time anti-spam blocking lists as a service software Saas provided by <a href="@spammaster_url">Spam Master</a>.</p>', ['@spammaster_url' => 'https://www.spammaster.org/']);
      $output_help .= t('<p>Spam Master checks ips, ranges, emails, domains, and words or text via heuristics.</p>');
      $output_help .= t('<h3>Version</h3>');
      $output_help .= t('<p>Your Spam Master version is: <strong>@version</strong>.</p>', ['@version' => $spammaster_version]);
      $output_help .= t('<h3>More</h3>');
      $output_help .= t('<p>Visit <a href="@spammaster_url">Spam Master project at Drupal</a>.</p>', ['@spammaster_url' => 'https://www.drupal.org/project/spammaster']);
      $output_help .= t('<p>Visit <a href="@spammaster_url">Spam Master Homepage</a>.</p>', ['@spammaster_url' => 'https://www.spammaster.org/']);
      $output_help .= t('<p>Visit <a href="@spammaster_url">Spam Master Documentation</a>.</p>', ['@spammaster_url' => 'https://www.spammaster.org/documentation/']);
      $output_help .= t('<p>Visit your website <a href="@spammaster_url">online statistics</a>.</p>', ['@spammaster_url' => 'https://www.spammaster.org/websites-stats/']);
      $output_help .= t('<p>Need a Full Year License? <a href="@spammaster_url">Get a full rbl license for peanuts</a>.</p>', ['@spammaster_url' => 'https://www.techgasp.com/downloads/spam-master-license/']);
      $output_help .= t('<h3>Social</h3>');
      $output_help .= t('<p>Like our <a href="@spammaster_url">Facebook</a> page and get the latest news.</p>', ['@spammaster_url' => 'https://www.facebook.com/TechGasp']);
      $output_help .= t('<p>Follow our <a href="@spammaster_url">Twitter</a> page and get the latest news.</p>', ['@spammaster_url' => 'https://twitter.com/techgasp']);
      $output_help .= t('<p>Follow our <a href="@spammaster_url">LinkedIn</a> page and get the latest news.</p>', ['@spammaster_url' => 'https://www.linkedin.com/company/techgasp']);
      $output_help .= t('<h3>Configuration & Options</h3>');
      $output_help .= t('<p>Spam Master settings, options and statistics are available via module administration pages.</p>');
      $output_help .= t('<p>Please visit the link below.</p>');
      return $output_help;
  }

}

/**
 * Implements cron().
 */
function spammaster_cron() {

  // Implements daily cron.
  if (\Drupal::time()->getRequestTime() - \Drupal::state()->get('spammaster.daily_con') >= 86400) {
    \Drupal::state()->set('spammaster.daily_con', \Drupal::time()->getRequestTime());

    // Daily cron service Call.
    \Drupal::service('spammaster.cron_service')->spamMasterDailyCron();

    // Log message.
    $spammaster_date = date('Y-m-d H:i:s');
    \Drupal::database()->insert('spammaster_keys')->fields([
      'date' => $spammaster_date,
      'spamkey' => 'spammaster',
      'spamvalue' => 'Spam Master: daily cron run successfully',
    ])->execute();
  }

  // Implements weekly cron.
  if (\Drupal::time()->getRequestTime() - \Drupal::state()->get('spammaster.weekly_con') >= 518400) {
    \Drupal::state()->set('spammaster.weekly_con', \Drupal::time()->getRequestTime());

    // Weekly cron service Call.
    \Drupal::service('spammaster.cron_service')->spamMasterWeeklyCron();

    // Log message.
    $spammaster_date = date('Y-m-d H:i:s');
    \Drupal::database()->insert('spammaster_keys')->fields([
      'date' => $spammaster_date,
      'spamkey' => 'spammaster',
      'spamvalue' => 'Spam Master: weekly cron run successfully',
    ])->execute();
  }

}

/**
 * Implements firewall theme().
 */
function spammaster_theme($existing, $type, $theme, $path) {

  return [
    'firewall' => [
      'variables' => [
        'spam_master_firewall_image' => NULL,
      ],
    ],
    'statistics' => [
      'variables' => [
        'spam_master_today_minus_1' => NULL,
        'spam_master_today_minus_2' => NULL,
        'spam_master_today_minus_3' => NULL,
        'spam_master_today_minus_4' => NULL,
        'spam_master_today_minus_5' => NULL,
        'totalitems_all_logs_1' => NULL,
        'totalitems_all_logs_2' => NULL,
        'totalitems_all_logs_3' => NULL,
        'totalitems_all_logs_4' => NULL,
        'totalitems_all_logs_5' => NULL,
        'totalitems_system_logs_1' => NULL,
        'totalitems_system_logs_2' => NULL,
        'totalitems_system_logs_3' => NULL,
        'totalitems_system_logs_4' => NULL,
        'totalitems_system_logs_5' => NULL,
        'totalitems_firewall_blocked_1' => NULL,
        'totalitems_firewall_blocked_2' => NULL,
        'totalitems_firewall_blocked_3' => NULL,
        'totalitems_firewall_blocked_4' => NULL,
        'totalitems_firewall_blocked_5' => NULL,
        'totalitems_registration_blocked_1' => NULL,
        'totalitems_registration_blocked_2' => NULL,
        'totalitems_registration_blocked_3' => NULL,
        'totalitems_registration_blocked_4' => NULL,
        'totalitems_registration_blocked_5' => NULL,
        'totalitems_comment_blocked_1' => NULL,
        'totalitems_comment_blocked_2' => NULL,
        'totalitems_comment_blocked_3' => NULL,
        'totalitems_comment_blocked_4' => NULL,
        'totalitems_comment_blocked_5' => NULL,
        'totalitems_contact_blocked_1' => NULL,
        'totalitems_contact_blocked_2' => NULL,
        'totalitems_contact_blocked_3' => NULL,
        'totalitems_contact_blocked_4' => NULL,
        'totalitems_contact_blocked_5' => NULL,
        'totalitems_honeypot_blocked_1' => NULL,
        'totalitems_honeypot_blocked_2' => NULL,
        'totalitems_honeypot_blocked_3' => NULL,
        'totalitems_honeypot_blocked_4' => NULL,
        'totalitems_honeypot_blocked_5' => NULL,
        'totalitems_recaptcha_blocked_1' => NULL,
        'totalitems_recaptcha_blocked_2' => NULL,
        'totalitems_recaptcha_blocked_3' => NULL,
        'totalitems_recaptcha_blocked_4' => NULL,
        'totalitems_recaptcha_blocked_5' => NULL,
        'total_count' => NULL,
        'total_count_all_logs' => NULL,
        'total_count_system_logs' => NULL,
        'total_count_firewall' => NULL,
        'total_count_registration' => NULL,
        'total_count_comment' => NULL,
        'total_count_contact' => NULL,
        'total_count_honeypot' => NULL,
        'total_count_recaptcha' => NULL,
        'spam_master_month_minus_1' => NULL,
        'spam_master_month_minus_2' => NULL,
        'spam_master_month_minus_3' => NULL,
        'total_month_all_logs_1' => NULL,
        'total_month_all_logs_2' => NULL,
        'total_month_all_logs_3' => NULL,
        'total_month_system_logs_1' => NULL,
        'total_month_system_logs_2' => NULL,
        'total_month_system_logs_3' => NULL,
        'total_month_firewall_1' => NULL,
        'total_month_firewall_2' => NULL,
        'total_month_firewall_3' => NULL,
        'total_month_registration_1' => NULL,
        'total_month_registration_2' => NULL,
        'total_month_registration_3' => NULL,
        'total_month_comment_1' => NULL,
        'total_month_comment_2' => NULL,
        'total_month_comment_3' => NULL,
        'total_month_contact_1' => NULL,
        'total_month_contact_2' => NULL,
        'total_month_contact_3' => NULL,
        'total_month_honeypot_1' => NULL,
        'total_month_honeypot_2' => NULL,
        'total_month_honeypot_3' => NULL,
        'total_month_recaptcha_1' => NULL,
        'total_month_recaptcha_2' => NULL,
        'total_month_recaptcha_3' => NULL,
      ],
    ],
    'total_count' => [
      'variables' => [
        'spammaster_total_threats_count' => NULL,
        'spammaster_total_threats_footer' => NULL,
      ],
    ],
    'heads_up' => [
      'variables' => [
        'spammaster_table_head' => NULL,
        'image_check' => NULL,
        'image_pass' => NULL,
        'image_lock' => NULL,
        'image_inactive' => NULL,
        'protection_engine_version_text' => NULL,
        'protection_engine_version' => NULL,
        'protection_license_protection_text' => NULL,
        'protection_license_protection' => NULL,
        'protection_license_protection_end' => NULL,
        'protection_scan_text' => NULL,
        'protection_firewall_text' => NULL,
        'spam_ssl_image' => NULL,
        'spam_ssl_text' => NULL,
        'spammaster_table_footer' => NULL,
      ],
    ],
    'firewall_status' => [
      'variables' => [
        'spammaster_table_head' => NULL,
        'image_path' => NULL,
        'output_d1' => NULL,
        'output_t2' => NULL,
        'output_d3' => NULL,
        'output_t4' => NULL,
        'output_d5' => NULL,
        'output_t6' => NULL,
        'output_d7' => NULL,
        'output_t8' => NULL,
        'output_d9' => NULL,
        'output_t10' => NULL,
        'output_d11' => NULL,
        'output_t12' => NULL,
        'output_d13' => NULL,
        'output_t14' => NULL,
        'output_d15' => NULL,
        'output_t16' => NULL,
        'spammaster_table_footer' => NULL,
      ],
    ],
  ];

}

/**
 * Implements hook_mail().
 */
function spammaster_mail($key, &$message, $params) {

  switch ($key) {
    case 'license_trial_create':
      $spammaster_subject_title = 'Congratulations!!!';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'license_trial_end':
      $spammaster_subject_title = 'License Expired!!!';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'license_full_end':
      $spammaster_subject_title = 'License Expired!!!';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'license_malfunction':
      $spammaster_subject_title = 'Warning!!! License Malfunction';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'lic_alert_level_3':
      $spammaster_subject_title = 'Warning!!! Your site is in Alert Level 3';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'mail_daily_report':
      $spammaster_subject_title = 'Daily Report';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'mail_weekly_report':
      $spammaster_subject_title = 'Weekly Report';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'mail_help_report':
      $spammaster_subject_title = 'Weekly Report';
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

  }

}

/**
 * Implements hook_page_top() for show status message.
 */
function spammaster_page_top(array &$page_top) {

  // Get module state value.
  $response_key = \Drupal::state()->get('spammaster.license_status');
  if ($response_key == 'VALID') {
  }
  else {
    $route = \Drupal::routeMatch()->getRouteObject();
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
    $response_message = \Drupal::messenger();
    if ($is_admin) {
      if (!isset($response_key) || empty($response_key) || $response_key == 'INACTIVE') {
        $response_message->addStatus(t('Spam Master is INACTIVE. You are not Protected!!! Make sure to visit the module settings page and insert a trial or full license. Press Save & Refresh License.'), 'error');
      }
      if ($response_key == 'MALFUNCTION_1') {
        $response_message->addStatus(t('Spam Master MALFUNCTION 1 detected. Not up to date!!! You are protected, not to worry. Your Spam Master version is at least 5 versions older than the current available version. Warning will auto disappear once Spam Master is updated and re-syncs with the RBL servers or, by pressing Save & Refresh License button in Spam Master settings page.'), 'error');
      }
      if ($response_key == 'MALFUNCTION_2') {
        $response_message->addStatus(t('Spam Master MALFUNCTION 2 detected. You are protected but your Spam Master version is at least 10 versions older than the current available version. Urgently update Spam Master to latest version. Warning will auto disappear once Spam Master is updated and re-syncs with the RBL servers or, by pressing Save & Refresh License button in Spam Master settings page.'), 'error');
      }
      if ($response_key == 'MALFUNCTION_3') {
        $response_message->addStatus(t('Spam Master MALFUNCTION 3 detected. You are not Protected!!! Get in touch with TechGasp support team. Warning will auto disappear once malfunction is fixed.'), 'error');
      }
      if ($response_key == 'EXPIRED') {
        $spammaster_type = \Drupal::state()->get('spammaster.type');
        if ($spammaster_type == 'TRIAL') {
          $response_message->addStatus(t('Spam Master trial EXPIRED. Hope you have enjoyed the bombastic spam protection provided by Spam Master. Unfortunately your website is now unprotected and may be subjected to thousands of spam threats & exploits. Not to worry! If you enjoyed the protection you can quickly get a full license, it costs peanuts per year, go to your Spam Master settings page and click "Get full rbl license" link.'), 'error');
        }
        if ($spammaster_type == 'FULL') {
          $response_message->addStatus(t('Spam Master is EXPIRED. Hope you have enjoyed 1 year of bombastic spam protection provided by Spam Master. Unfortunately your website is now unprotected and may be subjected to thousands of spam threats & exploits. Not to worry! If you enjoyed the protection you can quickly get another license, it costs peanuts per year, go to your Spam Master settings page and click "Get full rbl license" link.'), 'error');
        }
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spammaster_form_user_login_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $login_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $login_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $signature_login = $spammaster_settings_protection->get('spammaster.signature_login');

  if ($signature_login != 0) {
    $form['spammaster_signature_login'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://www.spammaster.org' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Implements reCaptcha form.
  if ($login_extra_recaptcha != 0) {
    $login_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_login');
    if ($login_extra_recaptcha_field != 0) {
      $form['spammaster_page'] = [
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#default_value' => 'login',
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ];
      $form = spammaster_recaptcha_form($form, $form_state);
      $form['#validate'][] = 'spammaster_recaptcha_validate';
    }
  }
  // Implements Honeypot form.
  if ($login_extra_honeypot != 0) {
    $login_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_login');
    if ($login_extra_honeypot_field != 0) {
      $form['spammaster_page'] = [
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#default_value' => 'login',
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ];
      $form = spammaster_honeypot_form($form, $form_state);
      $form['#validate'][] = 'spammaster_honeypot_validate';
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spammaster_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $registration_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $registration_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $registration_signature = $spammaster_settings_protection->get('spammaster.signature_registration');
  $basic_registration = $spammaster_settings_protection->get('spammaster.basic_registration');

  // Implements Signature form.
  if ($registration_signature != 0) {
    $form['spammaster_signature_registration'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://www.spammaster.org' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Check for spam in user registration form.
  // Check ip and email via local db and api.
  $user_forms = ['user_register_form'];

  if (in_array($form_id, $user_forms)) {
    // Add a new validation handler to the form if settings are active.
    if ($basic_registration != 0) {
      $form['#validate'][] = 'spammaster_registration_validate';
    }
    // Implements reCaptcha form.
    if ($registration_extra_recaptcha != 0) {
      $registration_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_registration');
      if ($registration_extra_recaptcha_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'hidden',
          '#disabled' => TRUE,
          '#default_value' => 'registration',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_recaptcha_form($form, $form_state);
        $form['#validate'][] = 'spammaster_recaptcha_validate';
      }
    }
    // Implements Honeypot form.
    if ($registration_extra_honeypot != 0) {
      $registration_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_registration');
      if ($registration_extra_honeypot_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'registration',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_honeypot_form($form, $form_state);
        $form['#validate'][] = 'spammaster_honeypot_validate';
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spammaster_form_contact_message_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $contact_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $contact_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $signature_contact = $spammaster_settings_protection->get('spammaster.signature_contact');
  $basic_contact = $spammaster_settings_protection->get('spammaster.basic_contact');
  if ($signature_contact != 0) {
    $form['spammaster_signature_contact'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://www.spammaster.org' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Check for spam in contact form.
  // Check ip and email via local db and api.
  $user_forms = [$form_id];

  if (in_array($form_id, $user_forms)) {
    $spammaster_anonymous = \Drupal::currentUser()->isAnonymous();
    // Add a new validation handler to the form if setting is active.
    if ($basic_contact != 0 && $spammaster_anonymous) {
      $form['#validate'][] = 'spammaster_contact_validate';
    }
    // Implements reCaptcha form.
    if ($contact_extra_recaptcha != 0) {
      $contact_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_contact');
      if ($contact_extra_recaptcha_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'hidden',
          '#disabled' => TRUE,
          '#default_value' => 'contact',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_recaptcha_form($form, $form_state);
        $form['#validate'][] = 'spammaster_recaptcha_validate';
      }
    }
    // Implements Honeypot form.
    if ($contact_extra_honeypot != 0) {
      $contact_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_contact');
      if ($contact_extra_honeypot_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'contact',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_honeypot_form($form, $form_state);
        $form['#validate'][] = 'spammaster_honeypot_validate';
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function spammaster_form_comment_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $comment_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $comment_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $signature_comment = $spammaster_settings_protection->get('spammaster.signature_comment');
  $basic_comment = $spammaster_settings_protection->get('spammaster.basic_comment');
  if ($signature_comment != 0) {
    $form['spammaster_signature_comment'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://www.spammaster.org' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Check for spam in comment form.
  // Check ip and email via local db and api.
  $user_forms = [$form_id];

  if (in_array($form_id, $user_forms)) {
    $spammaster_anonymous = \Drupal::currentUser()->isAnonymous();
    // Add a new validation handler to the form if setting is active.
    if ($basic_comment != 0 && $spammaster_anonymous) {
      $form['#validate'][] = 'spammaster_comment_validate';
    }
    // Implements reCaptcha form.
    if ($comment_extra_recaptcha != 0) {
      $comment_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_comment');
      if ($comment_extra_recaptcha_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'hidden',
          '#disabled' => TRUE,
          '#default_value' => 'comment',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_recaptcha_form($form, $form_state);
        $form['#validate'][] = 'spammaster_recaptcha_validate';
      }
    }
    // Implements Honeypot form.
    if ($comment_extra_honeypot != 0) {
      $comment_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_comment');
      if ($comment_extra_honeypot_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'comment',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_honeypot_form($form, $form_state);
        $form['#validate'][] = 'spammaster_honeypot_validate';
      }
    }
  }

}

/**
 * Implements form().
 */
function spammaster_recaptcha_form(&$form, &$form_state) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $extra_recaptcha_api_key = $spammaster_settings_protection->get('spammaster.extra_recaptcha_api_key');

  $form['spammaster_recaptcha_field'] = [
    '#markup' => '<div class="spammaster-recaptcha g-recaptcha form-group" data-sitekey="' . $extra_recaptcha_api_key . '"></div>',
    '#weight' => 99,
    '#attached' => [
      'html_head' => [
        [
          [
            '#tag' => 'script',
            '#attributes' => [
              'src' => Url::fromUri('https://www.google.com/recaptcha/api.js', ['query' => ['hl' => \Drupal::service('language_manager')->getCurrentLanguage()->getId()], 'absolute' => TRUE])->toString(),
              'async' => TRUE,
              'defer' => TRUE,
            ],
          ],
          'spammaster_recaptcha',
        ],
      ],
      'library' => [
        'spammaster/spammaster-styles',
      ],
    ],
  ];

  return $form;

}

/**
 * Implements form().
 */
function spammaster_honeypot_form(&$form, &$form_state) {

  $form['spammaster_extra_field_1'] = [
    '#theme_wrappers' => [
      'container' => [
        '#id' => NULL,
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ],
    ],
    '#type' => 'textfield',
    '#required' => FALSE,
    '#attributes' => [
      'autocomplete' => 'off',
    ],
    '#weight' => 97,
    '#title' => t('Insert your mother second name:'),
    '#description' => t('Insert your mother second name.'),
  ];
  $form['spammaster_extra_field_2'] = [
    '#theme_wrappers' => [
      'container' => [
        '#id' => NULL,
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ],
    ],
    '#type' => 'textfield',
    '#required' => FALSE,
    '#attributes' => [
      'autocomplete' => 'off',
    ],
    '#weight' => 98,
    '#title' => t('Insert your father second name:'),
    '#description' => t('Insert your father second name.'),
  ];

  return $form;

}

/**
 * Implements validate().
 */
function spammaster_recaptcha_validate(&$form, &$form_state) {

  // Get protection settings.
  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $extra_recaptcha_api_key = $spammaster_settings_protection->get('spammaster.extra_recaptcha_api_key');
  $extra_recaptcha_api_secret_key = $spammaster_settings_protection->get('spammaster.extra_recaptcha_api_secret_key');
  $spammasterpage = $form_state->getValue('spammaster_page');
  $spammasterip = \Drupal::request()->getClientIp();
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $spammasteragent = htmlentities($_SERVER['HTTP_USER_AGENT'], ENT_QUOTES, 'UTF-8');
  }
  else {
    $spammasteragent = "";
  }
  $formstate = $form_state;
  $spammaster_date = date('Y-m-d H:i:s');

  if (isset($_POST['g-recaptcha-response'])) {
    $client = \Drupal::httpClient();
    $response = $client->get('https://www.google.com/recaptcha/api/siteverify?secret=' . $extra_recaptcha_api_secret_key . '&response=' . $_POST['g-recaptcha-response']);
    $response = json_decode($response->getBody(), TRUE);
    if (empty($_POST['g-recaptcha-response']) || isset($response['error-codes'])) {
      $form_state->setErrorByName('spammaster_recaptcha_field', t('SPAM MASTER: Google reCaptcha V2 API error: @captcha-error', ['@captcha-error' => $response['error-codes'][0]]));
      // Log error.
      \Drupal::database()->insert('spammaster_keys')->fields([
        'date' => $spammaster_date,
        'spamkey' => 'spammaster-recaptcha',
        'spamvalue' => 'Spam Master: ' . $spammasterpage . ' recaptcha error IP: ' . $spammasterip . ', AGENT: ' . $spammasteragent,
      ])->execute();
    }
    if (empty($extra_recaptcha_api_key) || empty($extra_recaptcha_api_secret_key)) {
      $form_state->setErrorByName('spammaster_recaptcha_field', t('SPAM MASTER: No Google reCaptcha V2 API keys set. Please insert the Google reCaptcha API key and API secret key the in Spam Master Settings page.'));
      // Log error.
      \Drupal::database()->insert('spammaster_keys')->fields([
        'date' => $spammaster_date,
        'spamkey' => 'spammaster-recaptcha',
        'spamvalue' => 'SPAM MASTER: No Google reCaptcha V2 API keys set. Please insert the Google reCaptcha API key and API secret key the in Spam Master Settings page.',
      ])->execute();
    }
    if (TRUE === $response['success'] && !isset($response['error-codes'])) {
      // Recaptcha service call.
      $spammaster_recaptcha_service = \Drupal::service('spammaster.recaptcha_service');
      $spammaster_recaptcha_service->spamMasterRecaptchaCheck($form, $formstate, $spammasterpage, $spammasterip, $spammasteragent);
    }
  }

}

/**
 * Implements validate().
 */
function spammaster_honeypot_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $spammasteragent = htmlentities($_SERVER['HTTP_USER_AGENT'], ENT_QUOTES, 'UTF-8');
  }
  else {
    $spammasteragent = "";
  }
  $spammasterextrafield1 = $form_state->getValue('spammaster_extra_field_1');
  $spammasterextrafield2 = $form_state->getValue('spammaster_extra_field_2');
  $spammasterpage = $form_state->getValue('spammaster_page');
  $formstate = $form_state;
  if (empty($spammasterextrafield1) && empty($spammasterextrafield2)) {
    // Log fields ok.
    $spammaster_date = date('Y-m-d H:i:s');
    \Drupal::database()->insert('spammaster_keys')->fields([
      'date' => $spammaster_date,
      'spamkey' => 'spammaster-honeypot',
      'spamvalue' => 'Spam Master: ' . $spammasterpage . ' honeypot Ok IP: ' . $spammasterip . ', AGENT: ' . $spammasteragent,
    ])->execute();
  }
  else {
    if (empty($spammasterextrafield1)) {
      $spammasterextrafield1 = 'empty';
    }
    if (empty($spammasterextrafield2)) {
      $spammasterextrafield2 = 'empty';
    }
    // Honeypot service call.
    $spammaster_honeypot_service = \Drupal::service('spammaster.honeypot_service');
    $spammaster_honeypot_service->spamMasterHoneypotCheck($form, $formstate, $spammasterip, $spammasteragent, $spammasterpage, $spammasterextrafield1, $spammasterextrafield2);
  }

}

/**
 * Implements validate().
 */
function spammaster_registration_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $spammasteragent = htmlentities($_SERVER['HTTP_USER_AGENT'], ENT_QUOTES, 'UTF-8');
  }
  else {
    $spammasteragent = "";
  }
  $spammasteremail = $form_state->getValue('mail');
  $formstate = $form_state;
  // Registration service call.
  $spammaster_registration_service = \Drupal::service('spammaster.registration_service');
  $spammaster_registration_service->spamMasterRegistrationCheck($form, $formstate, $spammasterip, $spammasteragent, $spammasteremail);

}

/**
 * Implements validate().
 */
function spammaster_contact_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $spammasteragent = htmlentities($_SERVER['HTTP_USER_AGENT'], ENT_QUOTES, 'UTF-8');
  }
  else {
    $spammasteragent = "";
  }
  $spammasteremail = $form_state->getValue('mail');
  $spammastermessage = $form_state->getValue('message')[0]['value'];
  $formstate = $form_state;
  // Contact service call.
  $spammaster_contact_service = \Drupal::service('spammaster.contact_service');
  $spammaster_contact_service->spamMasterContactCheck($form, $formstate, $spammasterip, $spammasteragent, $spammasteremail, $spammastermessage);

}

/**
 * Implements validate().
 */
function spammaster_comment_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  if (isset($_SERVER['HTTP_USER_AGENT'])) {
    $spammasteragent = htmlentities($_SERVER['HTTP_USER_AGENT'], ENT_QUOTES, 'UTF-8');
  }
  else {
    $spammasteragent = "";
  }
  $spammasteremail = $form_state->getValue('mail');
  if (empty($spammasteremail) || is_array($spammasteremail)) {
    $spammasteremail = 'drup@' . date('Ymdhis') . '.drup';
  }
  $spammastercomment = $form_state->getValue('comment_body')[0]['value'];
  $formstate = $form_state;
  // Comment service call.
  $spammaster_comment_service = \Drupal::service('spammaster.comment_service');
  $spammaster_comment_service->spamMasterCommentCheck($form, $formstate, $spammasterip, $spammasteragent, $spammasteremail, $spammastercomment);

}
